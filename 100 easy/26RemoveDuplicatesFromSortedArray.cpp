/* 游늷 D칤a 4: Remove Duplicates from Sorted Array
游댕 Enunciado LeetCode: https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/
游꿘 Explicaci칩n en YouTube: [Pr칩ximamente]
游눹 Lenguaje: C++ */
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

//La funci칩n que debemos completar
/*Es muy importante comprender que nos pide el programa y son dos puntos muy importantes:
1. Hay que modificar el vector para que las primeras k posiciones sean n칰meros 칰nicos 
2. Hay que averiguar cuantos elementos hay
Por otro lado recomiendo imaginar que hace el vector, porque en el enunciado no se entiende claramente (o al menos a m칤 me ha costado)
Si nos dan [1,1,2]
k=2, solo hay dos elementos 칰nicos
Primero debemos "mover" los elementos repetidos al final [1,2,1]
Segundo imprimimos solo hasta k=2 (pero recordemos que en los arrays y vectores la posici칩n 2, es 2-1, la posici칩n i ser치 i-1)
 */
int removeDuplicates(vector<int>& nums) {
    if (nums.empty()) return 0;

    int k = 0;                              //k=0
    for (int j = 1; j < nums.size(); ++j) {  //j=1
        if (nums[j] != nums[k]) {  //comparamos nums[0] y nums[1] si fueran el mismo numero, directamente j va avanzando y k sigue igual hasta que cumpla la condici칩n
            ++k; //Si son distintos avanzamos k=k+1 nums[1]
            nums[k] = nums[j]; // nums[1]=nums[1]
        }
    }
    return k + 1; // cantidad de n칰meros 칰nicos
        
}

int main(){ 
    //Esto nos lo da el enunciado para que sepamos cu치l ser치 el
    // programa principal que usen para "mostrar" nuestro resultado
    int[] nums = [...]; // Input array
    int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}
}